# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DEUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtCore, QtGui, QtWidgets
from pyqtgraph import PlotWidget
import pyqtgraph as pg

import numpy as np
from DE import *
from solver import *
from error import *

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(700, 1000)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.CB_Euler = QtWidgets.QCheckBox(self.centralwidget)
        self.CB_Euler.setGeometry(QtCore.QRect(20, 270, 200, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CB_Euler.setFont(font)
        self.CB_Euler.setObjectName("CB_Euler")
        self.CB_I_Euler = QtWidgets.QCheckBox(self.centralwidget)
        self.CB_I_Euler.setGeometry(QtCore.QRect(20, 310, 200, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CB_I_Euler.setFont(font)
        self.CB_I_Euler.setObjectName("CB_I_Euler")
        self.CB_Runge_Kutta = QtWidgets.QCheckBox(self.centralwidget)
        self.CB_Runge_Kutta.setGeometry(QtCore.QRect(20, 330, 200, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CB_Runge_Kutta.setFont(font)
        self.CB_Runge_Kutta.setObjectName("CB_Runge_Kutta")
        self.CB_Exact = QtWidgets.QCheckBox(self.centralwidget)
        self.CB_Exact.setGeometry(QtCore.QRect(20, 290, 200, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CB_Exact.setFont(font)
        self.CB_Exact.setObjectName("CB_Exact")
        self.X_0 = QtWidgets.QLabel(self.centralwidget)
        self.X_0.setGeometry(QtCore.QRect(20, 50, 21, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.X_0.setFont(font)
        self.X_0.setObjectName("X_0")
        self.Y_0 = QtWidgets.QLabel(self.centralwidget)
        self.Y_0.setGeometry(QtCore.QRect(20, 80, 21, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Y_0.setFont(font)
        self.Y_0.setObjectName("Y_0")
        self.X = QtWidgets.QLabel(self.centralwidget)
        self.X.setGeometry(QtCore.QRect(20, 110, 21, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.X.setFont(font)
        self.X.setObjectName("X")
        self.N = QtWidgets.QLabel(self.centralwidget)
        self.N.setGeometry(QtCore.QRect(20, 140, 16, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.N.setFont(font)
        self.N.setObjectName("N")
        self.lE_X_0 = QtWidgets.QLineEdit(self.centralwidget)
        self.lE_X_0.setGeometry(QtCore.QRect(40, 50, 131, 20))
        self.lE_X_0.setObjectName("lE_X_0")
        self.lE_Y_0 = QtWidgets.QLineEdit(self.centralwidget)
        self.lE_Y_0.setGeometry(QtCore.QRect(40, 80, 131, 20))
        self.lE_Y_0.setObjectName("lE_Y_0")
        self.lE_X = QtWidgets.QLineEdit(self.centralwidget)
        self.lE_X.setGeometry(QtCore.QRect(40, 110, 131, 20))
        self.lE_X.setObjectName("lE_X")
        self.lE_N = QtWidgets.QLineEdit(self.centralwidget)
        self.lE_N.setGeometry(QtCore.QRect(40, 140, 131, 20))
        self.lE_N.setObjectName("lE_N")
        self.N_i = QtWidgets.QLabel(self.centralwidget)
        self.N_i.setGeometry(QtCore.QRect(20, 170, 16, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.N_i.setFont(font)
        self.N_i.setObjectName("N_i")
        self.X_4 = QtWidgets.QLabel(self.centralwidget)
        self.X_4.setGeometry(QtCore.QRect(20, 200, 16, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.X_4.setFont(font)
        self.X_4.setObjectName("X_4")
        self.lE_N_i = QtWidgets.QLineEdit(self.centralwidget)
        self.lE_N_i.setGeometry(QtCore.QRect(40, 170, 131, 20))
        self.lE_N_i.setObjectName("lE_N_i")
        self.lE_N_f = QtWidgets.QLineEdit(self.centralwidget)
        self.lE_N_f.setGeometry(QtCore.QRect(40, 200, 131, 20))
        self.lE_N_f.setObjectName("lE_N_f")
        self.Solutions = QtWidgets.QLabel(self.centralwidget)
        self.Solutions.setGeometry(QtCore.QRect(20, 240, 141, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.Solutions.setFont(font)
        self.Solutions.setObjectName("Solutions")
        self.Parameters = QtWidgets.QLabel(self.centralwidget)
        self.Parameters.setGeometry(QtCore.QRect(20, 20, 141, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.Parameters.setFont(font)
        self.Parameters.setObjectName("Parameters")
        self.calculate = QtWidgets.QPushButton(self.centralwidget)
        self.calculate.setGeometry(QtCore.QRect(110, 360, 75, 23))
        self.calculate.setObjectName("calculate")

        self.widget = PlotWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(220, 20, 421, 300))
        self.widget.setObjectName("widget")
        self.widget.setBackground('w')
        self.widget.setTitle("Function & its approximations")


        self.widget1 = PlotWidget(self.centralwidget)
        self.widget1.setGeometry(QtCore.QRect(220, 340, 421, 300))
        self.widget1.setObjectName("widget1")
        self.widget1.setBackground('w')
        self.widget1.setTitle("Local Errors")


        self.widget2 = PlotWidget(self.centralwidget)
        self.widget2.setGeometry(QtCore.QRect(220, 660, 421, 300))
        self.widget2.setObjectName("widget2")
        self.widget2.setBackground('w')
        self.widget2.setTitle("Total Errors")



        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1181, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.calculate.clicked.connect(lambda: self.draw())
        self.widget.setBackground('w')

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.CB_Euler.setText(_translate("MainWindow", "Euler(green)"))
        self.CB_I_Euler.setText(_translate("MainWindow", "Imp_Euler(glue)"))
        self.CB_Runge_Kutta.setText(_translate("MainWindow", "Runge-Kutta(~black)"))
        self.CB_Exact.setText(_translate("MainWindow", "Exact(red)"))
        self.X_0.setText(_translate("MainWindow", "X<sub>0</sub>"))
        self.Y_0.setText(_translate("MainWindow", "Y<sub>0</sub>"))
        self.X.setText(_translate("MainWindow", "<html><head/><body><p>X</p></body></html>"))
        self.N.setText(_translate("MainWindow", "<html><head/><body><p>N</p></body></html>"))
        self.N_i.setText(_translate("MainWindow", "N<sub>i</sub>"))
        self.X_4.setText(_translate("MainWindow", "N<sub>f</sub>"))
        self.Solutions.setText(_translate("MainWindow", "Solutions"))
        self.Parameters.setText(_translate("MainWindow", "Parameters"))
        self.calculate.setText(_translate("MainWindow", "Calculate"))

    def Solution_calc(self):
        try:
            x0 = float(self.lE_X_0.text())
            y0 = float(self.lE_Y_0.text())
            x = float(self.lE_X.text())
            N = int(self.lE_N.text())
        except ValueError:
            print("Wrong input")

        de = DE("1/x + (2*y)/(x*math.log(x))", x0, y0, x, N)
        exact = Exact_Solution()
        euler = Euler_Solution()
        ieuler = Improved_Euler_Solution()
        runge = Runge_Kutta_Solution()
        self.ex_xs, self.ex_ys = exact.solve(de)
        self.eu_xs, self.eu_ys = euler.solve(de)
        self.ieu_xs, self.ieu_ys = ieuler.solve(de)
        self.rk_xs, self.rk_ys = runge.solve(de)
        return de

    def Error_calc(self, de: DE):
        err = Error()
        self.eerx, self.eery = err.local_calc(self.ex_ys, self.eu_xs, self.eu_ys)
        self.ieerx, self.ieery = err.local_calc(self.ex_ys,  self.ieu_xs, self.ieu_ys)
        self.rkerx, self.rkery = err.local_calc(self.ex_ys,  self.rk_xs, self.rk_ys)
        try:
            N_i = int(self.lE_N_i.text())
            N_f = int(self.lE_N_f.text())
            if(N_i<N_f):
                e_g = []
                i_g = []
                r_g = []
                h = []
                for N in range(N_i, N_f + 1):
                    de = DE("1/x + (2*y)/(x*math.log(x))", de.x0, de.y0, de.x, N)
                    h.append(N)
                    exact = Exact_Solution()
                    euler = Euler_Solution()
                    improved = Improved_Euler_Solution()
                    runge = Runge_Kutta_Solution()
                    real_xs, real_ys = exact.solve(de)
                    euler_xs, euler_ys = euler.solve(de)
                    improved_xs, improved_ys = improved.solve(de)
                    runge_xs, runge_ys = runge.solve(de)
                    e_g.append(max(err.global_calc(real_ys, euler_xs, euler_ys)[1]))
                    i_g.append(max(err.global_calc(real_ys, improved_xs, improved_ys)[1]))
                    r_g.append(max(err.global_calc(real_ys, runge_xs, runge_ys)[1]))
                return e_g, i_g, r_g, h
        except ValueError:
            print("Wrong input")
            return [], [], [], []

    def draw(self):
        self.widget.clear()
        self.widget1.clear()
        self.widget2.clear()

        de = self.Solution_calc()

        pen1 = pg.mkPen(color=(255, 0, 0))
        pen2 = pg.mkPen(color=(0, 255, 0))
        pen3 = pg.mkPen(color=(0, 0, 255))
        pen4 = pg.mkPen(color=(64, 0, 64))

        if(self.CB_Exact.isChecked()):
            self.widget.plot(self.ex_xs, self.ex_ys,  name="Exact", pen=pen1)
        if(self.CB_Euler.isChecked()):
            self.widget.plot(self.eu_xs, self.eu_ys,  name="Euler", pen=pen2)
        if (self.CB_I_Euler.isChecked()):
            self.widget.plot(self.ieu_xs, self.ieu_ys, name="Improved Euler", pen=pen3)
        if (self.CB_Runge_Kutta.isChecked()):
            self.widget.plot(self.rk_xs, self.rk_ys, name="Runge Kutta", pen=pen4)
        self.widget.setLabel('left', 'y')
        self.widget.setLabel('bottom', 'x')

        e_g, i_g, r_g, h = self.Error_calc(de)

        if(self.CB_Euler.isChecked()):
            self.widget1.plot(self.eerx, self.eery, name="Euler", pen=pen2)
        if (self.CB_I_Euler.isChecked()):
            self.widget1.plot(self.ieerx, self.ieery, name="Improved Euler", pen=pen3)
        if (self.CB_Runge_Kutta.isChecked()):
            self.widget1.plot(self.rkerx, self.rkery, name="Runge Kutta", pen=pen4)
        self.widget1.setLabel('left', 'Local error')
        self.widget1.setLabel('bottom', 'x')
        if (self.CB_Euler.isChecked()):
            self.widget2.plot(h, e_g, name="Euler", pen=pen2)
        if (self.CB_I_Euler.isChecked()):
            self.widget2.plot(h, i_g, name="Improved Euler", pen=pen3)
        if (self.CB_Runge_Kutta.isChecked()):
            self.widget2.plot(h, r_g, name="Runge Kutta", pen=pen4)
        self.widget2.setLabel('left', ' Total approximation error ')
        self.widget2.setLabel('bottom', 'Interval')

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())